project_id         = "<project_id>"
region             = "us-central1"
zone               = "us-central1-f"
# network_name       = "default"
# subnetwork_name    = "default"
# subnetwork_project = "<project_id>"

client_labels              = {
  example = "only_daos_client"
}

# client_number_of_instances = 4
# client_preemptible         = "false"
# client_mig_name            = "daos-client"
# client_template_name       = "daos-client"
# client_instance_base_name  = "daos-client"
# client_machine_type        = "c2-standard-16"
# client_os_family           = "daos-client-hpc-centos-7"
# client_os_project          = "<project_id>"
# client_os_disk_type        = "pd-ssd"
# client_os_disk_size_gb     = 20

client_daos_agent_yml = <<EOT
#
# DAOS agent configuration file
#

# Management server access points
access_points: ["daos-server-0001","daos-server-0002","daos-server-0003"]

transport_config:
  allow_insecure: false
  ca_cert: /etc/daos/certs/daosCA.crt
  cert: /etc/daos/certs/agent.crt
  key: /etc/daos/certs/agent.key

EOT

client_daos_control_yml = <<EOT
#
# DAOS manager (dmg) configuration file
#

# hostlist must contain the list of all DAOS servers
hostlist: ["daos-server-[0001-0004"]
transport_config:
  allow_insecure: false
  ca_cert: /etc/daos/certs/daosCA.crt
  cert: /etc/daos/certs/agent.crt
  key: /etc/daos/certs/agent.key

EOT

cert_install_script_content = <<EOT

#!/bin/bash

set -e
trap 'echo "An unexpected error occurred. Exiting."' ERR

INSTALL_TYPE="${INSTALL_TYPE:-$1}"  # client or server
SECRET_NAME="daos-client_ca"         # Name of secret that was created by Terraform
SCRIPT_NAME=$(basename "$0")

if [[ -z "${INSTALL_TYPE}" ]]; then
  echo "ERROR: Install type [client|server] must be passed as the second parameter. Exiting..."
  exit 1
fi

get_ca_from_sm() {
  # Get the daosCA.tar.gz file from Secret Manager
  # daosCA.tar.gz contains the certs that need to be copied
  # to /etc/daos/certs

  if [[ -f "/var/daos/daosCA.tar.gz" ]]; then
    # Make sure that an old daosCA.tar.gz file doesn't exist before
    # we attempt to retrieve the file from Secret manager.
    rm -f "/var/daos/daosCA.tar.gz"
  fi

  # Loop until the secret exists.
  # If the secret is not found in max_secret_wait_time, then exit.
  max_secret_wait_time="5 mins"
  endtime=$(date -ud "${max_secret_wait_time}" +%s)
  until gcloud secrets versions list "${SECRET_NAME}" \
    --filter="NAME:1" \
    --format="value('name')" \
    --verbosity=none | grep -q 1
  do
    if [[ $(date -u +%s) -ge ${endtime} ]]; then
      echo "ERROR: Secret '${SECRET_NAME}' not found after checking for ${max_secret_wait_time}"
      exit 1
    fi
    echo "Checking for secret: ${SECRET_NAME}"
    sleep 5
  done

  echo "Found secret: ${SECRET_NAME}"
  echo "Saving '${SECRET_NAME}' data to /var/daos/daosCA.tar.gz"

  # Always get version 1 of the secret. There should not be other versions.
  gcloud secrets versions access 1 --secret="${SECRET_NAME}" \
    --format "value(payload.data.decode(base64).encode(base64))" \
    | base64 --decode > "/var/daos/daosCA.tar.gz"

  if [[ ! -f "/var/daos/daosCA.tar.gz" ]]; then
    echo "ERROR: File not found '/var/daos/daosCA.tar.gz'"
    exit 1
  fi

  echo "Extracting /var/daos/daosCA.tar.gz"
  tar xzf "/var/daos/daosCA.tar.gz" -C "/var/daos/"
  rm -f "/var/daos/daosCA.tar.gz"

  # Check to make sure the directory was created before continuing
  if [[ ! -d "/var/daos/daosCA" ]]; then
    echo "ERROR: Directory '/var/daos/daosCA' not found. Exiting ..."
    exit 1
  fi
}

echo "BEGIN: ${SCRIPT_NAME}"

cd "/var/daos"

# Only get the /var/daos/daosCA from Secret Manager
# when the /var/daos/daosCA directory doesn't exist.
# On the first DAOS server instance /var/daos/daosCA will exist because that
# is where the certs were generated. No need to get the daosCA.tar.gz file
# from the secret in that case.
if [[ ! -d "/var/daos/daosCA" ]]; then
  get_ca_from_sm
fi

# Cleanup any old certs that may exist.
rm -rf /etc/daos/certs
mkdir -p /etc/daos/certs

echo "Copying certs and setting permissions on ${INSTALL_TYPE,,} instance"

# CLIENT CERTS
if [[ "${INSTALL_TYPE,,}" == "client" ]]; then
  cp /var/daos/daosCA/certs/daosCA.crt /etc/daos/certs/
  cp /var/daos/daosCA/certs/agent.* /etc/daos/certs/
  chown -R daos_agent:daos_agent /etc/daos/certs
  chmod 0755 /etc/daos/certs
  chmod 0644 /etc/daos/certs/*.crt
  chmod 0600 /etc/daos/certs/*.key
fi

# SERVER CERTS
if [[ "${INSTALL_TYPE,,}" == "server" ]]; then
  # On GCP daos_server runs as root because instances don't have IOMMU
  # So server certs and keys should be owned by root
  cp /var/daos/daosCA/certs/daosCA.crt /etc/daos/certs/
  cp /var/daos/daosCA/certs/server.* /etc/daos/certs/

  # Server needs a copy of the agent.crt in /etc/daos/certs/clients
  mkdir -p /etc/daos/certs/clients
  cp "/var/daos/daosCA/certs/agent.crt" /etc/daos/certs/clients

  chown -R root:root /etc/daos/certs
  chmod 0755 /etc/daos/certs
  chmod 0755 /etc/daos/certs/clients

  # Since the daos_agent is also running on the server instances the
  # agent certs must exist in /etc/daos/certs/ and be owned by the daos_agent
  # user
  cp /var/daos/daosCA/certs/agent.* /etc/daos/certs/
  chown daos_agent:daos_agent /etc/daos/certs/agent.*

  chmod 0644 /etc/daos/certs/*.crt
  chmod 0600 /etc/daos/certs/*.key
  chmod 0644 /etc/daos/certs/clients/*

fi

#
# ADMIN CERTS ON CLIENTS AND SERVERS
#

# As of 2022-05-05 dmg requires mode 0700 admin.key
# Odd that its not 0600
# dmg must run as root
cp /var/daos/daosCA/certs/admin.* /etc/daos/certs/

chown root:root /etc/daos/certs/admin.*
chmod 0644 /etc/daos/certs/admin.crt
chmod 0700 /etc/daos/certs/admin.key

# Remove the CA dir now that the certs have been copied to /etc/daos/certs
if [[ -d "/var/daos/daosCA" ]]; then
  rm -rf "/var/daos/daosCA"
fi

echo "END: ${SCRIPT_NAME}"

EOT
